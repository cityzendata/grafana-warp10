import {QueryCtrl} from 'app/plugins/sdk'

export class Warp10QueryCtrl extends QueryCtrl {

  static templateUrl = 'template/query.html'
  $scope: any
  uiSegmentSrv: any
  target: any
  changeTicker: any
  updateAce: boolean

  className: string
  labels: any
  readToken: string
  bucketizer: string
  bucketCount: number
  reducer: string
  reducerLabels: string[]
  extraLabelKey: string
  extraLabelValue: string
  extraReducerLabel: string

  readOnly: boolean
  advancedMode: boolean

  bucketizers: string[]
  reducers: string[]

  constructor($scope, $injector, uiSegmentSrv) {
    super($scope, $injector)

    this.$scope = $scope
    this.uiSegmentSrv = uiSegmentSrv
    this.target.target = this.target.target || 'select metric'
    this.advancedMode = true

    this.className = ''
    this.labels = {}
    this.bucketizer = null
    this.bucketCount = 50
    this.reducer = null
    this.reducerLabels = []

    this.bucketizers = [
      'sum', 'max', 'min', 'mean', 'mean.circular', 'bucketizer.mean.circular.exclude-nulls', 'first', 'last', 'join', 'median', 'count', 'and', 'or'
    ]
    this.reducers = [
      'argmax', 'argmin', 'count', 'count.exclude-nulls', 'count.include-nulls', 'join', 'join.forbid-nulls', 'max', 'max.forbid-nulls', 'mean', 'mean.exclude-nulls', 'mean.circular', 'mean.circular.exclude-nulls', 'median', 'min', 'min.forbid-nulls', 'and', 'and.exclude-nulls', 'or', 'or.exclude-nulls', 'sd', 'shannonentropy.0', 'shannonentropy.1', 'sum', 'sum.forbid-nulls', 'var'
    ]
  }

  /*getOptions() {
    //return Promise.resolve([this.uiSegmentSrv.newSegment('test'), this.uiSegmentSrv.newSegment('abcd')])
  }*/

  _addLabel() {
    if (!this.extraLabelKey || !this.extraLabelValue) return
    this.labels[this.extraLabelKey] = this.extraLabelValue
    this.extraLabelKey = ''
    this.extraLabelValue = ''
  }

  _delLabel(key) {
    delete this.labels[key]
  }

  _addReducerLabel() {
    if (!this.extraReducerLabel) return
    this.reducerLabels.push(this.extraReducerLabel)
    this.extraReducerLabel = ''
  }

  _delReducerLabel(label) {
    let i = this.reducerLabels.indexOf(label)
    if (i != -1)
      this.reducerLabels.splice(i, 1)
  }

  _buildQuery() {
    this._addLabel()
    this._addReducerLabel()

    let q = '// QUERY BUILDER : AUTOGENERATED \n'
    let labelsStr = ''
    for(let label in this.labels) {
      labelsStr += `'${ label }' '${ this.labels[label] }'`
    }
    q += `[ '${ this.readToken }' '~${ this.className }.*' { ${ labelsStr } } $end $interval ] FETCH \n`

    if (this.bucketizer)
      q += `[ SWAP ${ this.bucketizer } $end $interval ${ this.bucketCount } / ${ this.bucketCount } ] BUCKETIZE \n`

    if (this.reducer) {
      let labels = this.reducerLabels.map((label) => {
        return `'${ label }'`
      })
      q += `[ SWAP [ ${ labels.join(' ') } ] ${ this.reducer } ] REDUCE \n`
    }
    q += `// END OF GENERATED QUERY \n`
    this.target.expr = q + this.target.expr
    //this.$scope.$apply()
    console.log('GENERATED QUERY', this.target.expr)
    this._refreshAce()
  }

  _refreshAce() {
    this.updateAce = !this.updateAce
  }

  toggleEditorMode() {
    this.readOnly = !this.readOnly
  }

  onChangeInternal() {
    clearTimeout(this.changeTicker)
    this.changeTicker = setTimeout(() => {
      this.refresh()
    }, 1000)
  }
}
