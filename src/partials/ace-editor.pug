template#warp10-query-template
  style.
    :host {
      width: 100%;
      display: flex;
      min-height: 50vh;
      flex-direction: column;
    }
    #container{
      flex: 1;
      resize: both;
      min-height: 50vh;
    }
  div(id='container')
script(src='/public/plugins/grafana-warp10-datasource/assets/lib/ace-1.2.6.js')
script(src='/public/plugins/grafana-warp10-datasource/assets/lib/ace-theme-monokai-1.2.6.js')
script(src='/public/plugins/grafana-warp10-datasource/assets/lib/ace-ext-language_tools-1.2.6.js')
script(src='/public/plugins/grafana-warp10-datasource/assets/lib/ace-mode-warpscript.js')
script.

  (function(window, document, undefined) {

    const myWindow = window
    const myDocument = document
    const currentScript = (document._currentScript || document.currentScript)
    const aceEditorTemplate = ((currentScript) ? currentScript.ownerDocument : myDocument).querySelector('template').content

    myWindow.addEventListener('WebComponentsReady', function() {
      const currentDocument = myDocument
      ace.require("ace/ext/language_tools");

      class AceEditor extends HTMLElement {

        constructor() {
          super()
          console.debug('create new ace-editor', this)
          this.shadyRoot = this.attachShadow({mode: 'open'})
          console.log(currentDocument.querySelector('#warp10-query-template'))
          this.shadyRoot.appendChild(currentDocument.importNode(aceEditorTemplate, true))
          this.container = this.shadyRoot.querySelector('#container')
          console.log('ace-editor container', this.container)

          // Prevent Grafana shortcuts when query editor is show
          let events = ['keydown', 'keypress', 'keyup']
          for (let event of events) {
            this.addEventListener(event, (e)=>{
              e.stopPropagation()
            }, false)
          }
        }

        connectedCallback() {
          console.debug('ace editor', 'connected')
          this.input = this.querySelector('textarea')
          console.log('ace-editor textarea', this.input.value)
          this.editor = ace.edit(this.container)
          // init query
          this.editor.getSession().setValue(this.input.value)
          this.editor.renderer.addEventListener('themeLoaded', this._onThemeLoaded.bind(this))
          // initial attributes
          this._injectTheme('#ace_editor\\.css')
          this._injectTheme('#ace-tm')
          this.editor.setOptions({
            theme: this.getAttribute('theme') || 'ace/mode/javascript',
            fontSize: this.getAttribute('fontsize') || 12,
            readOnly: this.getAttribute('readonly') || false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true
          })
          this.editor.getSession().setOptions({
            mode: this.getAttribute('mode'),
            useSoftTabs: true,
            useWrapMode: this.getAttribute('wrapmode'),
            tabSize: 2
          })

          // When user change ace editor, notify angular ngModel routine
          this.editor.getSession()
          .on('change', () => {
              this.input.value = this.editor.getValue()
              this.input.dispatchEvent(new Event('input'))
          })
        }

        disconnectedCallback() {
          console.debug('ace-editor', 'disconnected')
          this.input.value = this.editor.getSession().getValue()
        }

        /**
          * Which attributes change have to call attributeChangedCallback
          */
        static get observedAttributes() {
            return ['theme', 'mode', 'fontsize', 'readonly', 'wrapmode']
        }

        attributeChangedCallback(attr, oldVal, newVal) {
          console.debug('ACE EDITOR', 'attribute change', attr, oldVal, newVal)
          switch(attr){
            case 'theme':
              if (this.editor) this.editor.setTheme( newVal )
              break
            case 'mode':
              if (this.editor) this.editor.getSession().setMode( newVal )
              break
            case 'fontsize':
              if (this.editor) this.editor.setFontSize( newVal )
              break
            case 'readonly':
              if (this.editor) this.editor.setReadOnly( newVal === '' || newVal )
              break
            case 'wrapmode':
              if (this.editor) this.editor.getSession().setUseWrapMode( newVal !== null )
              break
          }
        }

        _onThemeLoaded(e){
            const themeId = `#${e.theme.cssClass}`
            this._injectTheme(themeId)
            // Workaround Chrome stable bug, force repaint
            this.container.style.display='none'
            this.container.offsetHeight
            this.container.style.display=''
        }

        _injectTheme(themeId) {
            const n = document.querySelector(themeId)
            this.shadyRoot.appendChild(AceEditor.cloneStyle(n))
        }

        static cloneStyle(style) {
          const s = document.createElement('style')
          s.id = style.id
          s.textContent = style.textContent
          return s
        }
      }
      if (!customElements.get('ace-editor'))
        window.customElements.define('ace-editor', AceEditor)
    })
  }(window, document))
