System.register(["app/plugins/sdk"], function (exports_1, context_1) {
    "use strict";
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __moduleName = context_1 && context_1.id;
    var sdk_1, Warp10QueryCtrl;
    return {
        setters: [
            function (sdk_1_1) {
                sdk_1 = sdk_1_1;
            }
        ],
        execute: function () {
            Warp10QueryCtrl = (function (_super) {
                __extends(Warp10QueryCtrl, _super);
                function Warp10QueryCtrl($scope, $injector, uiSegmentSrv) {
                    var _this = _super.call(this, $scope, $injector) || this;
                    _this.$scope = $scope;
                    _this.uiSegmentSrv = uiSegmentSrv;
                    _this.target.target = _this.target.target || 'select metric';
                    _this.advancedMode = true;
                    _this.className = '';
                    _this.labels = {};
                    _this.bucketizer = null;
                    _this.bucketCount = 50;
                    _this.reducer = null;
                    _this.reducerLabels = [];
                    _this.bucketizers = [
                        'sum', 'max', 'min', 'mean', 'mean.circular', 'bucketizer.mean.circular.exclude-nulls', 'first', 'last', 'join', 'median', 'count', 'and', 'or'
                    ];
                    _this.reducers = [
                        'argmax', 'argmin', 'count', 'count.exclude-nulls', 'count.include-nulls', 'join', 'join.forbid-nulls', 'max', 'max.forbid-nulls', 'mean', 'mean.exclude-nulls', 'mean.circular', 'mean.circular.exclude-nulls', 'median', 'min', 'min.forbid-nulls', 'and', 'and.exclude-nulls', 'or', 'or.exclude-nulls', 'sd', 'shannonentropy.0', 'shannonentropy.1', 'sum', 'sum.forbid-nulls', 'var'
                    ];
                    return _this;
                }
                /*getOptions() {
                  //return Promise.resolve([this.uiSegmentSrv.newSegment('test'), this.uiSegmentSrv.newSegment('abcd')])
                }*/
                Warp10QueryCtrl.prototype._addLabel = function () {
                    if (!this.extraLabelKey || !this.extraLabelValue)
                        return;
                    this.labels[this.extraLabelKey] = this.extraLabelValue;
                    this.extraLabelKey = '';
                    this.extraLabelValue = '';
                };
                Warp10QueryCtrl.prototype._delLabel = function (key) {
                    delete this.labels[key];
                };
                Warp10QueryCtrl.prototype._addReducerLabel = function () {
                    if (!this.extraReducerLabel)
                        return;
                    this.reducerLabels.push(this.extraReducerLabel);
                    this.extraReducerLabel = '';
                };
                Warp10QueryCtrl.prototype._delReducerLabel = function (label) {
                    var i = this.reducerLabels.indexOf(label);
                    if (i != -1)
                        this.reducerLabels.splice(i, 1);
                };
                Warp10QueryCtrl.prototype._buildQuery = function () {
                    this._addLabel();
                    this._addReducerLabel();
                    var q = '// QUERY BUILDER : AUTOGENERATED \n';
                    var labelsStr = '';
                    for (var label in this.labels) {
                        labelsStr += "'" + label + "' '" + this.labels[label] + "'";
                    }
                    q += "[ '" + this.readToken + "' '~" + this.className + ".*' { " + labelsStr + " } $end $interval ] FETCH \n";
                    if (this.bucketizer)
                        q += "[ SWAP " + this.bucketizer + " $end $interval " + this.bucketCount + " / " + this.bucketCount + " ] BUCKETIZE \n";
                    if (this.reducer) {
                        var labels = this.reducerLabels.map(function (label) {
                            return "'" + label + "'";
                        });
                        q += "[ SWAP [ " + labels.join(' ') + " ] " + this.reducer + " ] REDUCE \n";
                    }
                    q += "// END OF GENERATED QUERY \n";
                    this.target.expr = q + this.target.expr;
                    //this.$scope.$apply()
                    console.log('GENERATED QUERY', this.target.expr);
                    this._refreshAce();
                };
                Warp10QueryCtrl.prototype._refreshAce = function () {
                    this.updateAce = !this.updateAce;
                };
                Warp10QueryCtrl.prototype.toggleEditorMode = function () {
                    this.readOnly = !this.readOnly;
                };
                Warp10QueryCtrl.prototype.onChangeInternal = function () {
                    var _this = this;
                    clearTimeout(this.changeTicker);
                    this.changeTicker = setTimeout(function () {
                        _this.refresh();
                    }, 1000);
                };
                return Warp10QueryCtrl;
            }(sdk_1.QueryCtrl));
            Warp10QueryCtrl.templateUrl = 'template/query.html';
            exports_1("Warp10QueryCtrl", Warp10QueryCtrl);
        }
    };
});
